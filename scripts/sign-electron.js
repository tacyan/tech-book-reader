#!/usr/bin/env node

/**
 * @file ElectronÂÆüË°å„Éï„Ç°„Ç§„É´„Å´ÁΩ≤Âêç„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 * @description 
 * Ëá™Â∑±ÁΩ≤ÂêçË®ºÊòéÊõ∏„Çí‰Ωø„Å£„Å¶Electron„ÅÆÂÆüË°å„Éï„Ç°„Ç§„É´„Å´ÁΩ≤Âêç„Åó„ÄÅ
 * Windows Defender„Å™„Å©„ÅÆ„Ç¶„Ç£„É´„ÇπÂØæÁ≠ñ„ÇΩ„Éï„Éà„Å´‰ø°È†º„Åï„Çå„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åô„ÄÇ
 * 
 * ÂøÖË¶ÅÊù°‰ª∂:
 * - WindowsÁí∞Â¢É
 * - PowerShell„ÅåÂà©Áî®ÂèØËÉΩ
 * - ‰∫ãÂâç„Å´ create-certificate.ps1 „ÅßË®ºÊòéÊõ∏„Çí‰ΩúÊàêÊ∏à„Åø
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const { execSync } = require('child_process');

// Ë®ºÊòéÊõ∏„ÅÆ„Éë„Çπ„ÉØ„Éº„ÉâÔºàcreate-certificate.ps1„Å®Âêå„ÅòÔºâ
const CERT_PASSWORD = 'TechBookReader2024';

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  console.log('üîê Electron„Éê„Ç§„Éä„É™„Å´ÁΩ≤Âêç‰∏≠...\n');

  // Windows„Åß„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
  if (os.platform() !== 'win32') {
    console.log('‚ÑπÔ∏è  WindowsÁí∞Â¢É„Åß„ÅÆ„ÅøÁΩ≤Âêç„ÅåÂøÖË¶Å„Åß„Åô');
    console.log('‚úì ÁΩ≤Âêç„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü\n');
    return;
  }

  // Ë®ºÊòéÊõ∏„ÅÆ„Éë„Çπ„ÇíÂèñÂæó
  const certDir = path.join(os.homedir(), '.tech-book-reader', 'certificate');
  const pfxPath = path.join(certDir, 'TechBookReader.pfx');
  const thumbprintPath = path.join(certDir, 'thumbprint.txt');

  // Ë®ºÊòéÊõ∏„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
  if (!fs.existsSync(pfxPath)) {
    console.error('‚ùå Ë®ºÊòéÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì\n');
    console.error(`‰∫àÊÉ≥„Åï„Çå„Çã„Éë„Çπ: ${pfxPath}\n`);
    console.error('üí° ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßË®ºÊòéÊõ∏„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n');
    console.error('   powershell -ExecutionPolicy Bypass -File scripts/create-certificate.ps1\n');
    process.exit(1);
  }

  console.log(`‚úì Ë®ºÊòéÊõ∏„ÇíÊ§úÂá∫: ${pfxPath}\n`);

  // Electron„ÅÆ„Éë„Çπ„ÇíÂèñÂæó
  const electronPath = path.join(os.homedir(), '.tech-book-reader', 'electron', '27.3.11', 'electron.exe');

  if (!fs.existsSync(electronPath)) {
    console.error('‚ùå Electron„Éê„Ç§„Éä„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì\n');
    console.error(`‰∫àÊÉ≥„Åï„Çå„Çã„Éë„Çπ: ${electronPath}\n`);
    console.error('üí° ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßElectron„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n');
    console.error('   npm run install-electron\n');
    process.exit(1);
  }

  console.log(`‚úì Electron„Éê„Ç§„Éä„É™„ÇíÊ§úÂá∫: ${electronPath}\n`);

  // ÁΩ≤Âêç„ÉÑ„Éº„É´Ôºàsigntool.exeÔºâ„ÅÆ„Éë„Çπ„ÇíÊ§úÁ¥¢
  const signtoolPath = findSignTool();

  if (!signtoolPath) {
    console.error('‚ùå signtool.exe„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì\n');
    console.error('üí° Windows SDK„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n');
    console.error('   https://developer.microsoft.com/ja-jp/windows/downloads/windows-sdk/\n');
    console.error('„Åæ„Åü„ÅØ„ÄÅ‰ª•‰∏ã„ÅÆ‰ª£ÊõøÊñπÊ≥ï„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n');
    console.error('   npm run sign-electron-powershell\n');
    
    // PowerShell„ÅßÁΩ≤Âêç„ÇíË©¶Ë°å
    return signWithPowerShell(electronPath, pfxPath);
  }

  console.log(`‚úì ÁΩ≤Âêç„ÉÑ„Éº„É´„ÇíÊ§úÂá∫: ${signtoolPath}\n`);

  // ÁΩ≤Âêç„ÇíÂÆüË°å
  try {
    console.log('üî® ÁΩ≤Âêç„ÇíÂÆüË°å‰∏≠...\n');

    const signCommand = `"${signtoolPath}" sign /f "${pfxPath}" /p "${CERT_PASSWORD}" /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /v "${electronPath}"`;

    execSync(signCommand, {
      stdio: 'inherit',
      shell: true
    });

    console.log('\n‚úì ÁΩ≤Âêç„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n');
    console.log('üéâ Electron„Éê„Ç§„Éä„É™„ÅåÁΩ≤Âêç„Åï„Çå„Åæ„Åó„Åü\n');
    console.log('   npm start „Åß„Ç¢„Éó„É™„ÇíËµ∑Âãï„Åß„Åç„Åæ„Åô\n');

  } catch (error) {
    console.error(`\n‚ùå ÁΩ≤Âêç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}\n`);
    
    // PowerShell„ÅßÁΩ≤Âêç„ÇíË©¶Ë°å
    console.log('‚ö†Ô∏è  PowerShell„Åß„ÅÆÁΩ≤Âêç„ÇíË©¶Ë°å„Åó„Åæ„Åô...\n');
    return signWithPowerShell(electronPath, pfxPath);
  }
}

/**
 * signtool.exe„ÅÆ„Éë„Çπ„ÇíÊ§úÁ¥¢
 */
function findSignTool() {
  const possiblePaths = [
    'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\*\\x64\\signtool.exe',
    'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe',
    'C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\x64\\signtool.exe',
    'C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\signtool.exe'
  ];

  for (const pathPattern of possiblePaths) {
    try {
      if (pathPattern.includes('*')) {
        // „ÉØ„Ç§„É´„Éâ„Ç´„Éº„Éâ„ÇíÂê´„ÇÄ„Éë„Çπ„ÇíÊ§úÁ¥¢
        const result = execSync(`powershell -Command "Get-ChildItem '${pathPattern}' -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName"`, {
          encoding: 'utf8',
          stdio: 'pipe'
        }).trim();
        
        if (result && fs.existsSync(result)) {
          return result;
        }
      } else {
        if (fs.existsSync(pathPattern)) {
          return pathPattern;
        }
      }
    } catch (e) {
      // Á∂öË°å
    }
  }

  return null;
}

/**
 * PowerShell„ÅßÁΩ≤ÂêçÔºàsigntool„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
 */
function signWithPowerShell(electronPath, pfxPath) {
  console.log('üì¶ PowerShell„ÅßÁΩ≤Âêç„ÇíÂÆüË°å‰∏≠...\n');

  try {
    const psScript = `
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("${pfxPath.replace(/\\/g, '\\\\')}", "${CERT_PASSWORD}")
      Set-AuthenticodeSignature -FilePath "${electronPath.replace(/\\/g, '\\\\')}" -Certificate $cert -TimestampServer "http://timestamp.digicert.com"
    `;

    execSync(`powershell -NoProfile -Command "${psScript}"`, {
      stdio: 'inherit',
      shell: true
    });

    console.log('\n‚úì PowerShell„Åß„ÅÆÁΩ≤Âêç„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n');
    console.log('üéâ Electron„Éê„Ç§„Éä„É™„ÅåÁΩ≤Âêç„Åï„Çå„Åæ„Åó„Åü\n');
    console.log('   npm start „Åß„Ç¢„Éó„É™„ÇíËµ∑Âãï„Åß„Åç„Åæ„Åô\n');

  } catch (error) {
    console.error(`\n‚ùå PowerShell„Åß„ÅÆÁΩ≤Âêç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}\n`);
    console.error('üí° ÊâãÂãï„ÅßÁΩ≤Âêç„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n');
    console.error(`   1. Ë®ºÊòéÊõ∏: ${pfxPath}`);
    console.error(`   2. „Éï„Ç°„Ç§„É´: ${electronPath}`);
    console.error(`   3. „Éë„Çπ„ÉØ„Éº„Éâ: ${CERT_PASSWORD}\n`);
    process.exit(1);
  }
}

// ÂÆüË°å
main().catch((error) => {
  console.error(`\n‚ùå „Ç®„É©„Éº: ${error.message}`);
  console.error(error.stack);
  process.exit(1);
});



