#!/usr/bin/env node

/**
 * @file „Ç´„Çπ„Çø„É†Electron„Ç§„É≥„Çπ„Éà„Éº„É´„Çπ„ÇØ„É™„Éó„Éà
 * @description 
 * „Ç¶„Ç£„É´„ÇπÂØæÁ≠ñ„ÇΩ„Éï„Éà„ÇíÂõûÈÅø„Åô„Çã„Åü„ÇÅ„ÄÅElectron„ÇíÂÆâÂÖ®„Å™Â†¥ÊâÄ„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Åæ„Åô„ÄÇ
 * 
 * Êà¶Áï•:
 * 1. Electron„Çí„É¶„Éº„Ç∂„Éº„ÅÆ„Éõ„Éº„É†„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
 * 2. node_modules/electron„Å´„ÅØÂÆüË°åÂèØËÉΩ„Éï„Ç°„Ç§„É´„Åß„ÅØ„Å™„Åè„ÄÅ„Éë„ÇπÊÉÖÂ†±„ÅÆ„Åø„ÇíÈÖçÁΩÆ
 * 3. Ëµ∑ÂãïÊôÇ„Å´„Éõ„Éº„É†„Éá„Ç£„É¨„ÇØ„Éà„É™„Åã„ÇâÂÆüË°å
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const https = require('https');
const { execSync } = require('child_process');

// Electron„ÅÆ„Éê„Éº„Ç∏„Éß„É≥
const ELECTRON_VERSION = '27.3.11';
const PLATFORM = process.platform;
const ARCH = process.arch;

// ÂÆâÂÖ®„Å™„Ç§„É≥„Çπ„Éà„Éº„É´ÂÖàÔºà„Ç¶„Ç£„É´„ÇπÂØæÁ≠ñ„ÇΩ„Éï„Éà„ÅÆÁõ£Ë¶ñÂ§ñÔºâ
const HOME_DIR = os.homedir();
const SAFE_ELECTRON_DIR = path.join(HOME_DIR, '.tech-book-reader', 'electron', ELECTRON_VERSION);

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  console.log('üöÄ Tech Book ReaderÁî®Electron„Ç§„É≥„Çπ„Éà„Éº„É©„Éº\n');
  console.log(`üì¶ Electron„Éê„Éº„Ç∏„Éß„É≥: ${ELECTRON_VERSION}`);
  console.log(`üíæ „Ç§„É≥„Çπ„Éà„Éº„É´ÂÖà: ${SAFE_ELECTRON_DIR}\n`);

  // Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅãÁ¢∫Ë™ç
  let electronExePath;
  if (PLATFORM === 'win32') {
    electronExePath = path.join(SAFE_ELECTRON_DIR, 'electron.exe');
  } else if (PLATFORM === 'darwin') {
    electronExePath = path.join(SAFE_ELECTRON_DIR, 'Electron.app', 'Contents', 'MacOS', 'Electron');
  } else {
    electronExePath = path.join(SAFE_ELECTRON_DIR, 'electron');
  }

  if (fs.existsSync(electronExePath)) {
    console.log('‚úì Electron„ÅØÊó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
    console.log(`  „Éë„Çπ: ${electronExePath}\n`);
    createLinkFile(electronExePath);
    return;
  }

  // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâURL
  const zipName = getZipName();
  const downloadUrl = `https://github.com/electron/electron/releases/download/v${ELECTRON_VERSION}/${zipName}`;
  
  console.log(`üì• Electron„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‰∏≠...`);
  console.log(`  URL: ${downloadUrl}\n`);

  // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÖà
  const downloadDir = path.join(HOME_DIR, '.tech-book-reader', 'downloads');
  fs.mkdirSync(downloadDir, { recursive: true });
  const zipPath = path.join(downloadDir, zipName);

  try {
    // „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    await downloadFile(downloadUrl, zipPath);
    console.log('‚úì „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆå‰∫Ü\n');

    // Â±ïÈñã
    console.log('üì¶ Electron„ÇíÂ±ïÈñã‰∏≠...\n');
    fs.mkdirSync(SAFE_ELECTRON_DIR, { recursive: true });
    
    if (PLATFORM === 'win32') {
      // Windows„ÅÆÂ†¥ÂêàÔºöPowerShell„ÅßÂ±ïÈñã
      extractZipWindows(zipPath, SAFE_ELECTRON_DIR);
    } else {
      // macOS/Linux„ÅÆÂ†¥ÂêàÔºöunzip„Ç≥„Éû„É≥„Éâ„ÅßÂ±ïÈñã
      extractZipUnix(zipPath, SAFE_ELECTRON_DIR);
    }

    console.log('‚úì Â±ïÈñãÂÆå‰∫Ü\n');

    // Â±ïÈñã„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
    const extractedFiles = fs.readdirSync(SAFE_ELECTRON_DIR);
    console.log(`üìÅ Â±ïÈñã„Åï„Çå„Åü„Éï„Ç°„Ç§„É´Êï∞: ${extractedFiles.length}`);
    if (extractedFiles.length === 0) {
      throw new Error('Â±ïÈñã„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„Åå0ÂÄã„Åß„Åô„ÄÇÂ±ïÈñã„Å´Â§±Êïó„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ');
    }
    console.log(`   ‰∏ªË¶Å„Éï„Ç°„Ç§„É´: ${extractedFiles.slice(0, 5).join(', ')}...\n`);

    // electron.exe„ÅåÂ≠òÂú®„Åô„Çã„ÅãÂç≥Â∫ß„Å´Á¢∫Ë™ç
    if (!fs.existsSync(electronExePath)) {
      console.error(`‚ùå electron.exe„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${electronExePath}`);
      console.error(`   Â±ïÈñã„Åï„Çå„Åü„Éï„Ç°„Ç§„É´‰∏ÄË¶ß:`);
      extractedFiles.forEach(f => console.error(`     - ${f}`));
      throw new Error('electron.exe„ÅÆÂ±ïÈñã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
    console.log(`‚úì electron.exeÁ¢∫Ë™ç: ${electronExePath}\n`);

    // zip„Éï„Ç°„Ç§„É´„ÅØ‰øùÊåÅÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
    // fs.unlinkSync(zipPath);

    // **ÈáçË¶ÅÔºö„Ç¶„Ç£„É´„ÇπÂØæÁ≠ñ„ÇΩ„Éï„Éà„Å´ÂâäÈô§„Åï„Çå„ÇãÂâç„Å´Âç≥Â∫ß„Å´ÁΩ≤Âêç**
    console.log('üîê Electron„Éê„Ç§„Éä„É™„Å´ÁΩ≤Âêç‰∏≠Ôºà„Ç¶„Ç£„É´„ÇπÂØæÁ≠ñ„ÇΩ„Éï„ÉàÂØæÁ≠ñÔºâ...\n');
    try {
      signElectronImmediately(electronExePath);
      console.log('‚úì ÁΩ≤ÂêçÂÆå‰∫Ü\n');
    } catch (signError) {
      console.warn(`‚ö†Ô∏è  ÁΩ≤Âêç„Å´Â§±Êïó: ${signError.message}`);
      console.warn('   „Ç¢„Éó„É™„ÅØÂãï‰Ωú„Åó„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô\n');
    }

    // „É™„É≥„ÇØ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
    createLinkFile(electronExePath);

    console.log('üéâ Electron„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n');
    console.log(`‚úì ElectronÂÆüË°å„Éï„Ç°„Ç§„É´: ${electronExePath}`);
    console.log(`‚úì npm start „Åß„Ç¢„Éó„É™„ÇíËµ∑Âãï„Åß„Åç„Åæ„Åô\n`);

  } catch (error) {
    console.error(`\n‚ùå „Ç§„É≥„Çπ„Éà„Éº„É´Â§±Êïó: ${error.message}\n`);
    console.error('üí° Ëß£Ê±∫ÊñπÊ≥ï:');
    console.error('1. „Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    console.error('2. ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅßÂÆüË°å„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ');
    console.error('3. ÊâãÂãï„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ:');
    console.error(`   ${downloadUrl}`);
    console.error(`   ‚Üí ${SAFE_ELECTRON_DIR} „Å´Â±ïÈñã\n`);
    process.exit(1);
  }
}

/**
 * „Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
 */
function downloadFile(url, destPath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(destPath);
    
    const request = https.get(url, (response) => {
      // „É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Å´ÂØæÂøú
      if (response.statusCode === 302 || response.statusCode === 301) {
        file.close();
        fs.unlinkSync(destPath);
        return downloadFile(response.headers.location, destPath)
          .then(resolve)
          .catch(reject);
      }

      if (response.statusCode !== 200) {
        file.close();
        fs.unlinkSync(destPath);
        return reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
      }

      const totalSize = parseInt(response.headers['content-length'], 10);
      let downloaded = 0;
      let lastPercent = 0;

      response.on('data', (chunk) => {
        downloaded += chunk.length;
        const percent = Math.floor((downloaded / totalSize) * 100);
        
        if (percent > lastPercent && percent % 10 === 0) {
          process.stdout.write(`  ÈÄ≤Êçó: ${percent}%\r`);
          lastPercent = percent;
        }
      });

      response.pipe(file);

      file.on('finish', () => {
        file.close();
        process.stdout.write('\n');
        resolve();
      });
    });

    request.on('error', (err) => {
      file.close();
      fs.unlinkSync(destPath);
      reject(err);
    });

    file.on('error', (err) => {
      file.close();
      fs.unlinkSync(destPath);
      reject(err);
    });
  });
}

/**
 * zip„Éï„Ç°„Ç§„É´Âêç„ÇíÂèñÂæó
 */
function getZipName() {
  if (PLATFORM === 'win32') {
    return `electron-v${ELECTRON_VERSION}-win32-${ARCH === 'x64' ? 'x64' : 'ia32'}.zip`;
  } else if (PLATFORM === 'darwin') {
    return `electron-v${ELECTRON_VERSION}-darwin-${ARCH}.zip`;
  } else {
    return `electron-v${ELECTRON_VERSION}-linux-${ARCH}.zip`;
  }
}

/**
 * WindowsÁî®zipÂ±ïÈñã
 */
function extractZipWindows(zipPath, destPath) {
  // ÊñπÊ≥ï1: PowerShell„ÅßÂ±ïÈñãÔºàÊúÄ„ÇÇÁ¢∫ÂÆüÔºâ
  try {
    const psScript = `Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory('${zipPath.replace(/\\/g, '\\\\')}', '${destPath.replace(/\\/g, '\\\\')}')`;
    
    execSync(`powershell -NoProfile -Command "${psScript}"`, {
      stdio: 'inherit',
      shell: true,
      timeout: 120000 // 2ÂàÜ„Çø„Ç§„É†„Ç¢„Ç¶„Éà
    });
    return; // ÊàêÂäü
  } catch (error) {
    console.log(`‚ö†Ô∏è  PowerShellÂ±ïÈñãÂ§±Êïó: ${error.message}`);
    console.log('   tar„Ç≥„Éû„É≥„Éâ„ÅßË©¶Ë°å‰∏≠...\n');
  }
  
  // ÊñπÊ≥ï2: tar„Ç≥„Éû„É≥„Éâ
  try {
    execSync(`tar -xf "${zipPath}" -C "${destPath}"`, {
      stdio: 'inherit',
      shell: true,
      timeout: 120000
    });
    return; // ÊàêÂäü
  } catch (error) {
    console.log(`‚ö†Ô∏è  tarÂ±ïÈñãÂ§±Êïó: ${error.message}\n`);
  }
  
  throw new Error('„Åô„Åπ„Å¶„ÅÆÂ±ïÈñãÊñπÊ≥ï„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü');
}

/**
 * macOS/LinuxÁî®zipÂ±ïÈñã
 */
function extractZipUnix(zipPath, destPath) {
  execSync(`unzip -q "${zipPath}" -d "${destPath}"`, {
    stdio: 'inherit',
    shell: true
  });
}

/**
 * node_modules/electron„Å´„É™„É≥„ÇØ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
 */
function createLinkFile(electronExePath) {
  const projectRoot = path.join(__dirname, '..');
  const electronModuleDir = path.join(projectRoot, 'node_modules', 'electron');
  
  // node_modules/electron„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
  fs.mkdirSync(electronModuleDir, { recursive: true });
  
  // path.txt„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàêÔºàElectron„ÅÆ„Éë„Çπ„ÇíË®òÈå≤Ôºâ
  const pathTxtPath = path.join(electronModuleDir, 'path.txt');
  fs.writeFileSync(pathTxtPath, electronExePath, 'utf8');
  
  console.log(`‚úì „É™„É≥„ÇØ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê: ${pathTxtPath}`);
}

/**
 * Electron„Å´Âç≥Â∫ß„Å´ÁΩ≤ÂêçÔºà„Ç¶„Ç£„É´„ÇπÂØæÁ≠ñ„ÇΩ„Éï„ÉàÂØæÁ≠ñÔºâ
 */
function signElectronImmediately(electronExePath) {
  const certDir = path.join(os.homedir(), '.tech-book-reader', 'certificate');
  const pfxPath = path.join(certDir, 'TechBookReader.pfx');
  const certPassword = 'TechBookReader2024';

  if (!fs.existsSync(pfxPath)) {
    throw new Error('Ë®ºÊòéÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇcreate-certificate.ps1„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
  }

  // PowerShell„ÅßÁΩ≤Âêç
  const psScript = `
    $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("${pfxPath.replace(/\\/g, '\\\\')}", "${certPassword}")
    $result = Set-AuthenticodeSignature -FilePath "${electronExePath.replace(/\\/g, '\\\\')}" -Certificate $cert -TimestampServer "http://timestamp.digicert.com"
    if ($result.Status -ne 'Valid') {
      throw "ÁΩ≤Âêç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $($result.Status)"
    }
  `;

  execSync(`powershell -NoProfile -Command "${psScript}"`, {
    stdio: 'pipe',
    shell: true
  });
}

// ÂÆüË°å
main().catch((error) => {
  console.error(`\n‚ùå „Ç®„É©„Éº: ${error.message}`);
  console.error(error.stack);
  process.exit(1);
});

